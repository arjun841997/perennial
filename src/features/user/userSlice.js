import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getUsers } from './userAPI';

const initialState = {
  users: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getusersAsync = createAsyncThunk(
  'user/getUsers',
  async () => {
    const response = await getUsers();
    console.log("users action ", response)
    // The value we return becomes the `fulfilled` action payload    
    return response.results;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getUsersReducer: (state, action) =>{
      state.users = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getusersAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getusersAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log("users reducer ", action.payload)
        state.users = action.payload;
      });
  },
});

export const { getUsersReducer } = userSlice.actions;

export const selectUsers = (state) => state.user.users;

export default userSlice.reducer;
